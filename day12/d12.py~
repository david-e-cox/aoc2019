#!/usr/bin/python3

import numpy as np
import itertools
import fractions

# Read input file


#moonPos = np.array([ [-1,0,2],[2,-10,-7],[4,-8,8],[3,5,-1] ])
#moonPos  = np.array([ [-8,-10,0],[5,5,10],[2,-7,3],[9,-8,-3]],dtype=int)
moonPos = np.array([ [3,-6,6],[10,7,-9],[-3,-7,9],[-8,0,4] ])
moonVel  = np.array([ [0,0,0],[0,0,0],[0,0,0],[0,0,0] ],dtype=int)

stateHistory=set();
done=False
moonPos0=moonPos.copy()
moonVel0=moonVel.copy()
moonPeriodXYZ=np.zeros([4,3],dtype=int)

cnt=0;
doneSet=set()
while (not done):
    cnt+=1;
    for mSelf,mOther in itertools.product(range(4),range(4)):
        posDelta = moonPos[mSelf] - moonPos[mOther]
        moonVel[mSelf]+=[-1 if v else 0 for v in posDelta>0]
        moonVel[mSelf]+=[+1 if v else 0 for v in posDelta<0]

    moonPos+=moonVel
    potNrg=np.sum(np.abs(moonPos),axis=1)
    kinNrg=np.sum(np.abs(moonVel),axis=1)
    totNrg=np.sum(potNrg*kinNrg)
    if (cnt==100):
        print("Total Energy is {1:d}: {0:d}".format(totNrg,cnt))
    dPos=moonPos-moonPos0
    dVel=moonVel-moonVel0
    for i in range(0,4):
        for  j in range(0,3):
            if dPos[i,j]==0 and dVel[i,j]==0 and (i,j) not in doneSet:
                moonPeriodXYZ[i,j]=cnt
                print("State repeat at moon {0:d}, axis:{1:d}, cnt:{2:d}".format(i,j,cnt))
                doneSet.add((i,j))

    if len(doneSet)==12:
        print(moonPeriodXYZ)
        done=True

#print("Solution to part A is {0:d}".format(totNrg))


